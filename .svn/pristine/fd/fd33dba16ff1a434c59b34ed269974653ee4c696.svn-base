using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using AlphaPoint_QA.Common;
using AlphaPoint_QA.Utils;
using log4net;
using OpenQA.Selenium;
using Xunit;
using Xunit.Abstractions;

namespace AlphaPoint_QA.Pages
{
    class TradeReportsPage
    {
        IWebDriver driver;
        ProgressLogger logger;


        By tradeReportsLink = By.XPath("//li[@data-test='Trade Reports']");
        By singleReportButton = By.XPath("//div[@class='activity-reporting__actions-holder']/button[1]");
        By cyclicReportButton = By.XPath("//div[@class='activity-reporting__actions-holder']/button[1]");
        By singleReportText = By.XPath("//div[@data-test='Single Report']");
        By cyclicReportText = By.XPath("//div[@data-test='Cyclical Report']");
        By singleReportsTab = By.XPath("//div[@class='ap-tab__menu reports-sidepane__menu']/div[1]");
        By cyclicReportsTab = By.XPath("//div[@class='ap-tab__menu reports-sidepane__menu']/div[2]");
        By singleReportsTabSelected = By.XPath("//div[@class='ap-tab__menu-item ap-tab__menu-item--active reports-sidepane__menu-item reports-sidepane__menu-item--active ap-tab__menu-item reports-sidepane__menu-item']");
        By accountsCheckbox = By.XPath("//div[@class='ap-checkbox__checkbox report-form__checkbox']");
        By reportType = By.XPath("//*[@class='form-control ap-select__select report-form__select']");
        By startDate = By.XPath("//input[@class='form-control ap-datepicker__input report-form__dpk-input' and @name='startDate']");
        By endDate = By.XPath("//input[@class='form-control ap-datepicker__input report-form__dpk-input' and @name='endDate']");
        By frequencyCyclicReport = By.XPath("//*[@class='form-control ap-select__select report-form__select' and @name='frequency']");
        By createTradeReportButton = By.XPath("//*[@class='ap-button__btn ap-button__btn--additive report-form__btn report-form__btn--additive']");
        By confirmationModalCreateReportButton = By.XPath("//button[@class='ap-button__btn ap-button__btn--additive ap-modal confirm-report-modal__btn ap-modal confirm-report-modal__btn--additive']");
        //By isDisplayedElement = By.ClassName("is-disabled");
        By dateWidgetFormElement = By.XPath("//table[@class='pika-table']/tbody");
        By confirmSingleReport = By.XPath("//div[@class='confirm-single-report']//p");


        By reportTypeActivity = By.XPath("//div[@class='confirm-single-report']//p[@class='confirm-single-report__title']//following::div[1]//span");
        By startDateActivity = By.XPath("//div[@class='confirm-single-report']//p[@class='confirm-single-report__title']//following::div[2]//span");
        By endDateActivity = By.XPath("//div[@class='confirm-single-report']//p[@class='confirm-single-report__title']//following::div[3]//span");

        By tradeActivityText = By.XPath("//select[@class='form-control ap-select__select report-form__select']//option[@value='TradeActivity']");
        By transactionActivityText = By.XPath("//select[@class='form-control ap-select__select report-form__select']//option[@value='Transaction']");
        By treasuryActivityText = By.XPath("//select[@class='form-control ap-select__select report-form__select']//option[@value='Treasury']");
        By startDateOnConfirmationSingleReportModal = By.XPath("//span[@data-test='Start Date:']");
        By endDateOnConfirmationSingleReportModal = By.XPath("//span[@data-test='End Date:']");
        By refreshReportsButton = By.XPath("//button[@class='ap-inline-btn__btn ap-inline-btn__btn--general download-report__refresh-reports__btn download-report__refresh-reports__btn--general']");
        By reportSummaryText = By.XPath("//div[@class='flex-table__row download-report__row'][1]//div[1]");
        By createdDateTimeText = By.XPath("//div[@class='flex-table__row download-report__row'][1]//div[2]");
        By downloadReport = By.XPath("//div[@class='flex-table__row download-report__row'][1]//div[3]//button");
        By countOfTradeReports = By.XPath("//div[@class='flex-table__body download-report__body']/div");

        By singleReportSuccessMsg = By.XPath("//div[@class='snackbar__text snackbar__text--success custom-snackbar__text custom-snackbar__text--success']");

        public TradeReportsPage(IWebDriver driver, ProgressLogger logger)
        {
            this.driver = driver;
            this.logger = logger;

        }

        public IWebElement RingleReportSuccessMsg()
        {
            return driver.FindElement(singleReportSuccessMsg);
        }

        public IWebElement ReportSummaryText()
        {
            return driver.FindElement(reportSummaryText);
        }

        public IWebElement CreatedDateTimeText()
        {
            return driver.FindElement(createdDateTimeText);
        }

        public int CountOfTradeReports()
        {
            return driver.FindElements(countOfTradeReports).Count;
        }

        public IWebElement DownloadReport()
        {
            return driver.FindElement(downloadReport);
        }

        public IWebElement RefreshReportsButton()
        {
            return driver.FindElement(refreshReportsButton);
        }

        public IWebElement StartDateOnConfirmationSingleReportModal()
        {
            return driver.FindElement(startDateOnConfirmationSingleReportModal);
        }

        public IWebElement ConfirmationModalCreateReportButton()
        {
            return driver.FindElement(confirmationModalCreateReportButton);
        }


        public IWebElement EndDateOnConfirmationSingleReportModal()
        {
            return driver.FindElement(endDateOnConfirmationSingleReportModal);
        }

        public IWebElement TradeActivityText()
        {
            return driver.FindElement(tradeActivityText);
        }

        public IWebElement TransactionActivityText()
        {
            return driver.FindElement(transactionActivityText);
        }

        public IWebElement TreasuryActivityText()
        {
            return driver.FindElement(treasuryActivityText);
        }

        public IWebElement ReportTypeActivity()
        {
            return driver.FindElement(reportTypeActivity);
        }

        public IWebElement StartDateActivity()
        {
            return driver.FindElement(startDateActivity);
        }

        public IWebElement EndDateActivity()
        {
            return driver.FindElement(endDateActivity);
        }

        public IWebElement ConfirmSingleReport()
        {
            return driver.FindElement(confirmSingleReport);
        }

        public IWebElement DateWidgetFormElement()
        {
            return driver.FindElement(dateWidgetFormElement);
        }

        //public IWebElement IsDisplayedElement()
        // {
        //return driver.FindElement(isDisplayedElement);
        //}

        public IWebElement TradeReportsLink()
        {
            return driver.FindElement(tradeReportsLink);
        }

        public IWebElement SingleReportButton()
        {
            return driver.FindElement(singleReportButton);
        }

        public IWebElement CyclicReportButton()
        {
            return driver.FindElement(cyclicReportButton);
        }

        public IWebElement SingleReportText()
        {
            return driver.FindElement(singleReportText);
        }

        public IWebElement CyclicReportText()
        {
            return driver.FindElement(cyclicReportText);
        }

        public IWebElement SingleReportTab()
        {
            return driver.FindElement(singleReportsTab);
        }

        public IWebElement CyclicReportTab()
        {
            return driver.FindElement(cyclicReportsTab);
        }

        public IWebElement SingleReportsTabSelected()
        {
            return driver.FindElement(singleReportsTabSelected);
        }

        public IWebElement AccountsCheckbox()
        {
            return driver.FindElement(accountsCheckbox);
        }

        public IWebElement ReportType()
        {
            return driver.FindElement(reportType);
        }

        public IWebElement StartDate()
        {
            return driver.FindElement(startDate);
        }

        public IWebElement EndDate()
        {
            return driver.FindElement(endDate);
        }

        public IWebElement FrequencyCyclicReport()
        {
            return driver.FindElement(frequencyCyclicReport);
        }

        public IWebElement CreateTradeReportButton()
        {
            return driver.FindElement(createTradeReportButton);
        }


        public void CreateTradeDepositWithdraw()
        {
            //Pre-condition few trade, deposit and withdraw activities
        }

        public void CreateSingleReportButton()
        {

        }

        public void VerifySingleReportModalDetails()
        {
            //"Verify below details on confirmation modal:Report type and dates from earlier page"
        }

        public void CreateSingleReportModalButton()
        {

        }

        public void VerifyCreateSingleReportSuccessMessage()
        {

        }

        public void ClickCyclicReportButton()
        {

        }

        public void VerifyCyclicReportDetails()
        {


        }

        public void VerifyFrequencyDropdown()
        {


        }

        public void SelectCyclicReportType()
        {


        }

        public void SelectCyclicStartDate()
        {


        }

        public void SelectCyclicFrequency()
        {


        }

        public void ClickCreateCyclicReportButton()
        {


        }

        public void VerifyCyclicReportModal()
        {

        }

        public void VerifyCyclicReportModalDetails()
        {
            //"Verify below details on confirmation modal:Report type and dates from earlier page"
        }

        public void CreateCyclicReportModalButton()
        {

        }

        public void VerifyCreateCyclicReportSuccessMessage()
        {

        }


        /// <summary>
        /// Details Page
        /// </summary>
        /// 
        public void ClickRefreshReportsButton()
        {
            try
            {
                Thread.Sleep(1000);
                UserSetFunctions.Click(RefreshReportsButton());
                Thread.Sleep(1000);
            }
            catch (Exception e)
            {

            }
        }

        public void VerifyLatestSingleReportGenerated()
        {
            //Verify Top most report is the latest created report

        }

        public void VerifyLatestSingleReportCreatedTime()
        {
            //Verify the created time
        }



        public void VerifyDownloadSingleReportLink()
        {
            //"Verify the report is downloadable
        }

        public bool VerifyCyclicReportsDetails()
        {
            //Verify Report is available under 'Cyclic reports' section
            return true;
        }

        public void VerifyCyclicReportSummaryDetails()
        {

        }

        public void VerifyCyclicReportFrequency()
        {

        }

        public void VerifyCyclicReportCreatedDate()
        {

        }

        public void VerifyCyclicCancelReportButton()
        {

        }

        public void VerifyDownloadCyclicReportLink()
        {
            //"Verify the report is downloadable
        }

        public void VerifyCancelCyclicReportButton()
        {

        }

        public void VerifyCancelCyclicReportsSection()
        {
            //Verify that the report is removed from 'Cyclic reports' section

        }

        //"Verify below details:Report summary is 'report type' , on demand and from and to date. "
        public void VerifySingleReportSummaryDetails()
        {
            string singleReportTradeActivityValue = TestData.GetData("TC47_SingleReportTradeActivityValue");
            string singleReportTransactionActivityValue = TestData.GetData("TC47_SingleReportTransactionActivityValue");
            string singleReportTreasuryActivitytValue = TestData.GetData("TC47_SingleReportTreasuryActivitytValue");


            string actualValueOfTradeActivity = TradeActivityText().Text;
            string actualValueOfTransactionActivity = TradeActivityText().Text;
            string actualValueOfTreasuryActivity = TradeActivityText().Text;

            try
            {
                if (actualValueOfTradeActivity.Equals(singleReportTradeActivityValue))
                {
                    try
                    {
                        logger.LogCheckPoint(String.Format(LogMessage.SingleReportTradeActivityPassed));
                    }
                    catch (Exception)
                    {
                        logger.Error(String.Format(LogMessage.SingleReportTradeActivityFailed));
                    }
                }
                else if (actualValueOfTransactionActivity.Equals(singleReportTransactionActivityValue))
                {
                    try
                    {
                        logger.LogCheckPoint(String.Format(LogMessage.SingleReportTransactionActivityPassed));
                    }
                    catch (Exception)
                    {
                        logger.Error(String.Format(LogMessage.SingleReportTransactionActivityFailed));
                    }
                }
                else if (actualValueOfTreasuryActivity.Equals(singleReportTreasuryActivitytValue))
                {
                    try
                    {
                        logger.LogCheckPoint(String.Format(LogMessage.SingleReportTreasuryActivityPassed));
                    }
                    catch (Exception)
                    {
                        logger.Error(String.Format(LogMessage.SingleReportTreasuryActivityFailed));
                    }
                }

            }
            catch (Exception e)
            {
                throw e;
            }
        }

        // This method verifies that the Single and Cyclic Report tabs are present
        // By default Single Reports tab is selected
        public bool VerifySingleAndCyclicReportText()
        {
            string singleReport = TestData.GetData("TC47_SingleReportValue");
            string cyclicReport = TestData.GetData("TC47_CyclicReportValue");
            bool flag = false;
            Thread.Sleep(1000);
            if (SingleReportText().Text.Equals(singleReport) && CyclicReportText().Text.Equals(cyclicReport))
            {
                if (SingleReportsTabSelected().Displayed)
                {
                    flag = true;
                    logger.LogCheckPoint(String.Format(LogMessage.SingleReportAndCyclicReportPassed));
                    return flag;
                }
                else
                {
                    UserSetFunctions.Click(SingleReportTab());
                    logger.Error(String.Format(LogMessage.SingleReportAndCyclicReportFailed));
                }
            }
            return flag;
        }

        // This method verifies that the "Verify below fields are present: accounts, report type and start date, end date"
        public bool VerifySingleReportFields()
        {
            bool flag = false;
            Thread.Sleep(1000);
            if (AccountsCheckbox().Displayed && ReportType().Displayed && StartDate().Displayed && EndDate().Displayed)
            {
                flag = true;
                logger.LogCheckPoint(String.Format(LogMessage.FieldsOnSingleReportPassed));
                return flag;
            }
            else
            {
                logger.Error(String.Format(LogMessage.FieldsOnSingleReportFailed));
            }
            return flag;
        }

        // This method verifies Current Date - 1 and all previous dates are selectable         
        public bool VerifyStartDateSelectableDates()
        {
            int today;
            bool flag = false;
            today = GenericUtils.GetOnlyCurrentDate();
            UserSetFunctions.Click(StartDate());
            IWebElement dateWidgetFrom = driver.FindElement(By.XPath("//table[@class='pika-table']/tbody"));
            //This are the columns of the from date picker table
            List<IWebElement> columns = new List<IWebElement>();
            var dateColumn = dateWidgetFrom.FindElements(By.ClassName("is-disabled"));
            foreach (IWebElement fields in dateColumn)
            {
                string disabledFields = fields.Text;
                int fieldValueInInt = Int32.Parse(disabledFields);
                if (fieldValueInInt >= today)
                {
                    flag = true;
                    logger.LogCheckPoint(String.Format(LogMessage.StartCurrentDateAndPreviousDatePassed));
                    return flag;
                }
                else
                {
                    logger.Error(String.Format(LogMessage.StartCurrentDateAndPreviousDateFailed));
                    return flag;
                }
            }
            return flag;
        }

        // This method verifies selectable dates are greater than start date and equal to current date
        public bool VerifyEndDateSelectableDates(string startDate)
        {
            int today;
            int startDateSelected = GenericUtils.GetOnlyDateFromDateString(startDate);
            bool flag = false;
            today = GenericUtils.GetOnlyCurrentDate();

            UserSetFunctions.Click(EndDate());
            IWebElement dateWidgetEnd = driver.FindElement(By.XPath("//table[@class='pika-table']/tbody"));
            //This are the columns of the from date picker table
            List<IWebElement> columns = new List<IWebElement>();
            var dateColumn = dateWidgetEnd.FindElements(By.ClassName("is-disabled"));
            foreach (IWebElement fields in dateColumn)
            {
                string disabledFields = fields.Text;
                int fieldValueInInt = Int32.Parse(disabledFields);
                if (fieldValueInInt > today)
                {
                    logger.LogCheckPoint(String.Format(LogMessage.EndCurrentDateGreaterThanStartDatePassed));//fieldValueInInt
                }
                else
                {
                    logger.LogCheckPoint(String.Format(LogMessage.EndCurrentDateGreaterThanStartDateFailed));
                }
                if (fieldValueInInt < startDateSelected)
                {
                    logger.LogCheckPoint(String.Format(LogMessage.LessThanStartDatePassed, fieldValueInInt));
                }
                else
                {
                    logger.LogCheckPoint(String.Format(LogMessage.LessThanStartDateFailed, fieldValueInInt));
                }


                //if ((fieldValueInInt <= today)&&(startDateSelected>fieldValueInInt))
                //{
                //    flag = true;
                //    logger.Info("The Current Date - 1 and all previous dates are selectable");
                //    return flag;
                //}
                //else
                //{
                //    logger.Error("Verification failed : The Current Date - 1 and all previous dates are not selectable");
                //    return flag;
                //}
            }
            return flag;
        }

        //This method will verify the confirmation modal window for single report
        public void VerifySingleReportModalConfirmation()
        {
            string expectedConfirmationSingleReport = TestData.GetData("TC47_Confirm");
            try
            {
                string actualConfirmationSingleReport = ConfirmSingleReport().Text;
                Assert.Equal(actualConfirmationSingleReport, expectedConfirmationSingleReport);
                logger.LogCheckPoint(String.Format(LogMessage.SingleReportConfirmationModalPassed));
            }
            catch (Exception)
            {
                logger.LogCheckPoint(String.Format(LogMessage.SingleReportConfirmationModalFailed));
            }
        }

        //This method returns the list of all trade reports
        public ArrayList GetListTradeReports()
        {
            ArrayList TradeReportList = new ArrayList();
            int countOfTradeReports = CountOfTradeReports();
            for (int i = 1; i <= countOfTradeReports; i++)
            {
                String textFinal = "";
                int countItems = driver.FindElements(By.XPath("(//div[@class='flex-table__body download-report__body']/div)[" + i + "]/div")).Count;
                for (int j = 1; j <= countItems; j++)
                {
                    String text = driver.FindElement(By.XPath("(//div[@class='flex-table__body download-report__body']/div)[" + i + "]/div[" + j + "]")).Text;
                    if (j == 1)
                    {
                        textFinal = text;
                    }
                    else
                    {
                        textFinal = textFinal + " || " + text;
                    }

                }
                TradeReportList.Add(textFinal);
            }
            return TradeReportList;
        }

        //This method will verify the order placed in Open orders tab through Order Entry 
        public bool VerifyTopMostTradeReports(string tradeActivity, string createdDateTime, string downloadBtnText)
        {
            try
            {
                var flag = false;

                string expectedRow_1 = tradeActivity + " || " + createdDateTime + " || " + downloadBtnText;

                var listOfTradeReports = GetListTradeReports();
                if (listOfTradeReports.Contains(expectedRow_1))
                {
                    flag = true;
                }
                if (flag)
                {
                    logger.LogCheckPoint(String.Format(LogMessage.VerifyAvailableTradeReportsPassed));
                }
                else
                {
                    logger.Error(String.Format(LogMessage.VerifyAvailableTradeReportsFailed));
                }

                Thread.Sleep(1000);
                if (DownloadReport().Enabled)
                {
                    logger.LogCheckPoint(String.Format(LogMessage.VerifyDownloadTradeReportsPassed));
                }
                else
                {
                    logger.Error(String.Format(LogMessage.VerifyDownloadTradeReportsFailed));
                }
                return flag;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        //This method will verify the trade activites of Single Report 
        public bool VerifySingleReportData(string reportTypeValue, string startDate, string endDate)
        {
            bool flag = false;
            UserCommonFunctions.DashBoardMenuButton(driver);
            UserCommonFunctions.NavigateToUserSetting(driver);
            Thread.Sleep(2000);
            UserSetFunctions.Click(TradeReportsLink());
            Thread.Sleep(1000);
            UserSetFunctions.Click(SingleReportButton());
            if (VerifySingleAndCyclicReportText())
            {
                //flag = true;
                if (VerifySingleReportFields())
                {
                    Thread.Sleep(1000);
                    UserSetFunctions.Click(SingleReportsTabSelected());
                    Thread.Sleep(1000);
                    UserSetFunctions.SelectDropdown(ReportType(), reportTypeValue);

                    if (VerifyStartDateSelectableDates())
                    {
                        Thread.Sleep(2000);
                        //UserSetFunctions.Click(StartDate());
                        if (startDate == null)
                        {
                            startDate = GenericUtils.GetCurrentDateMinusOne();
                        }
                        Thread.Sleep(1000);
                        StartDate().SendKeys(startDate);                        
                        flag = true;
                    }

                    //UserSetFunctions.Click(StartDate());
                    //if (startDate == null)
                    //{
                    //    startDate = GenericUtils.GetCurrentDateMinusOne();
                    //}
                    //StartDate().SendKeys(startDate);
                    //Thread.Sleep(1000);
                    //flag = true;

                    /*
                    if (VerifyEndDateSelectableDates(startDate))
                    {
                        UserSetFunctions.Click(EndDate());
                        if (endDate == null)
                        {
                            endDate = GenericUtils.GetCurrentDateMinusOne();
                        }
                        EndDate().SendKeys(endDate);
                        flag = true;
                    }

                    */
                    UserSetFunctions.Click(EndDate());
                    if (endDate == null)
                    {
                        endDate = GenericUtils.GetCurrentDate();
                    }
                    EndDate().SendKeys(endDate);
                    flag = true;
                    
                    UserSetFunctions.Click(CreateTradeReportButton());
                    VerifySingleReportModalConfirmation();

                    string confirmationModalStartDate = StartDateOnConfirmationSingleReportModal().Text;
                    string confirmationModalEndDate = EndDateOnConfirmationSingleReportModal().Text;
                    string expectedConfirmationModalEndDate = endDate.Trim();
                    var strtDate = DateTime.Parse(startDate.Trim());
                    var endDte = DateTime.Parse(expectedConfirmationModalEndDate);

                    if (DateTime.Parse(confirmationModalStartDate).Equals(strtDate) && DateTime.Parse(confirmationModalEndDate).Equals(endDte))
                    {
                        logger.LogCheckPoint(String.Format(LogMessage.StartAndEndDateConfirmationModalPassed, strtDate.ToString("MM/dd/yyyy"), endDte.ToString("MM/dd/yyyy")));
                    }
                    else
                    {
                        logger.Error(String.Format(LogMessage.StartAndEndDateConfirmationModalFailed, strtDate.ToString("MM/dd/yyyy"), endDte.ToString("MM/dd/yyyy")));
                    }
                    UserSetFunctions.Click(ConfirmationModalCreateReportButton());
                                       
                    string singleReportMSg = RingleReportSuccessMsg().Text;
                    if (singleReportMSg.Equals(Const.SingleTradeReportMsg))
                    {
                        logger.LogCheckPoint(String.Format(LogMessage.SingleReportSuccessMsgPassed));
                    }
                    else
                    {
                        logger.Error(String.Format(LogMessage.SingleReportSuccessMsgFailed));
                    }

                    ClickRefreshReportsButton();
                    string reportSummaryTextValue = ReportSummaryText().Text;
                    string createdDateTimeTextValue = CreatedDateTimeText().Text;
                    string downloadReportBtnTextValue = DownloadReport().Text;
                    VerifyTopMostTradeReports(reportSummaryTextValue, createdDateTimeTextValue, downloadReportBtnTextValue);
                }
            }
            return flag;
        }
    }
}
